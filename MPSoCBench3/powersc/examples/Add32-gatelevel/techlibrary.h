///////////////////////////////////////////////////
// Date of creation: Thu Oct 12 14:27:58 2006
//
// This file was automatically generated by the
// psclib2sc tool.
//
// psclib2sc is part of the PowerSC suite
//
// LSC - Computer Systems Laboratory
// http://www.lsc.ic.unicamp.br
///////////////////////////////////////////////////

#ifndef __techlibrary_h__
#define __techlibrary_h__

#include <systemc.h>

#include <powersc.h>

// Library units
class LibUnits {
	public:
		static const double voltage;
		static const double capacitive;
		static const double time;
		static const double leakage_power;
		static const double dynamic_power;
		static void use_lib_time();
};

// Library operating conditions
typedef enum {
	BEST_CASE_TREE,
	WORST_CASE_TREE,
	BALANCED_CASE_TREE
} rc_tree_type_t;

class LibOperCond {
	public:
		static const double voltage;
		static const double process;
		static const double temperature;
		static const rc_tree_type_t tree_type;
};

// using a 'default' wire load model
// it will be modified later
class LibWireLoad {
	public:
		static const double resistance;
		static const double capacitance;
		static const double fanout_length[10];
};

// modules aliases

SC_MODULE(and2_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~and2_1();

	SC_CTOR(and2_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(and2_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~and2_2();

	SC_CTOR(and2_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(and2_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~and2_4();

	SC_CTOR(and2_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(and3_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~and3_1();

	SC_CTOR(and3_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(and3_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~and3_2();

	SC_CTOR(and3_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(and3_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~and3_4();

	SC_CTOR(and3_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(and4_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~and4_1();

	SC_CTOR(and4_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(and4_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~and4_2();

	SC_CTOR(and4_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(and4_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~and4_4();

	SC_CTOR(and4_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(buf_1)
{
	// ports
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~buf_1();

	SC_CTOR(buf_1)
	{
		SC_METHOD(proc);
		sensitive << ip;
	}
};

SC_MODULE(buf_2)
{
	// ports
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~buf_2();

	SC_CTOR(buf_2)
	{
		SC_METHOD(proc);
		sensitive << ip;
	}
};

SC_MODULE(buf_4)
{
	// ports
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~buf_4();

	SC_CTOR(buf_4)
	{
		SC_METHOD(proc);
		sensitive << ip;
	}
};

SC_MODULE(bufzp_2)
{
	// ports
	sc_in<bool> c;
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_c;
	static const double fanout_load_c;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_c_fall[4][4];
	static const double lin_op_c_fall[4]; // total output net capacitance
	static const double col_op_c_fall[4]; // input transition time

	static const double power_op_c_rise[4][4];
	static const double lin_op_c_rise[4]; // total output net capacitance
	static const double col_op_c_rise[4]; // input transition time

	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~bufzp_2();

	SC_CTOR(bufzp_2)
	{
		SC_METHOD(proc);
		sensitive << c << ip;
	}
};

SC_MODULE(cd_12)
{
	// ports
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~cd_12();

	SC_CTOR(cd_12)
	{
		SC_METHOD(proc);
		sensitive << ip;
	}
};

SC_MODULE(cd_16)
{
	// ports
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~cd_16();

	SC_CTOR(cd_16)
	{
		SC_METHOD(proc);
		sensitive << ip;
	}
};

SC_MODULE(cd_8)
{
	// ports
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~cd_8();

	SC_CTOR(cd_8)
	{
		SC_METHOD(proc);
		sensitive << ip;
	}
};

SC_MODULE(dksp_1)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> sb;
	sc_out<bool> q;
	sc_out<bool> qb;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_sb;
	static const double fanout_load_sb;
	static const double max_capacitance_q;
	static const double max_fanout_q;
	static const double max_capacitance_qb;
	static const double max_fanout_qb;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_sb_fall[4];
	static const double col_sb_fall[4]; // input transition time

	static const double power_sb_rise[4];
	static const double col_sb_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	void end_of_elaboration();

	~dksp_1();

	SC_CTOR(dksp_1)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;

		SC_METHOD(ff_input);
		sensitive << ip << sb;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(dp_1)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	void end_of_elaboration();

	~dp_1();

	SC_CTOR(dp_1)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;

		SC_METHOD(ff_input);
		sensitive << ip;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(dp_2)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	void end_of_elaboration();

	~dp_2();

	SC_CTOR(dp_2)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;

		SC_METHOD(ff_input);
		sensitive << ip;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(dp_4)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	void end_of_elaboration();

	~dp_4();

	SC_CTOR(dp_4)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;

		SC_METHOD(ff_input);
		sensitive << ip;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(drp_1)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_rb_fall[4];
	static const double col_rb_fall[4]; // input transition time

	static const double power_rb_rise[4];
	static const double col_rb_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	void end_of_elaboration();

	~drp_1();

	SC_CTOR(drp_1)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;
		sensitive << rb;

		SC_METHOD(ff_input);
		sensitive << ip << rb;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(drp_2)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_rb_fall[4];
	static const double col_rb_fall[4]; // input transition time

	static const double power_rb_rise[4];
	static const double col_rb_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	void end_of_elaboration();

	~drp_2();

	SC_CTOR(drp_2)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;
		sensitive << rb;

		SC_METHOD(ff_input);
		sensitive << ip << rb;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(drp_4)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_rb_fall[4];
	static const double col_rb_fall[4]; // input transition time

	static const double power_rb_rise[4];
	static const double col_rb_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	void end_of_elaboration();

	~drp_4();

	SC_CTOR(drp_4)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;
		sensitive << rb;

		SC_METHOD(ff_input);
		sensitive << ip << rb;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(drsp_1)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_in<bool> s;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double capacitance_s;
	static const double fanout_load_s;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_rb_fall[4];
	static const double col_rb_fall[4]; // input transition time

	static const double power_rb_rise[4];
	static const double col_rb_rise[4]; // input transition time

	static const double power_s_fall[4];
	static const double col_s_fall[4]; // input transition time

	static const double power_s_rise[4];
	static const double col_s_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	static const double power_q_s_fall[4][4];
	static const double lin_q_s_fall[4]; // total output net capacitance
	static const double col_q_s_fall[4]; // input transition time

	static const double power_q_s_rise[4][4];
	static const double lin_q_s_rise[4]; // total output net capacitance
	static const double col_q_s_rise[4]; // input transition time

	void end_of_elaboration();

	~drsp_1();

	SC_CTOR(drsp_1)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;
		sensitive << rb;
		sensitive << s;

		SC_METHOD(ff_input);
		sensitive << ip << rb << s;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(drsp_2)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_in<bool> s;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double capacitance_s;
	static const double fanout_load_s;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_rb_fall[4];
	static const double col_rb_fall[4]; // input transition time

	static const double power_rb_rise[4];
	static const double col_rb_rise[4]; // input transition time

	static const double power_s_fall[4];
	static const double col_s_fall[4]; // input transition time

	static const double power_s_rise[4];
	static const double col_s_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	static const double power_q_s_fall[4][4];
	static const double lin_q_s_fall[4]; // total output net capacitance
	static const double col_q_s_fall[4]; // input transition time

	static const double power_q_s_rise[4][4];
	static const double lin_q_s_rise[4]; // total output net capacitance
	static const double col_q_s_rise[4]; // input transition time

	void end_of_elaboration();

	~drsp_2();

	SC_CTOR(drsp_2)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;
		sensitive << rb;
		sensitive << s;

		SC_METHOD(ff_input);
		sensitive << ip << rb << s;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(drsp_4)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_in<bool> s;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double capacitance_s;
	static const double fanout_load_s;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_rb_fall[4];
	static const double col_rb_fall[4]; // input transition time

	static const double power_rb_rise[4];
	static const double col_rb_rise[4]; // input transition time

	static const double power_s_fall[4];
	static const double col_s_fall[4]; // input transition time

	static const double power_s_rise[4];
	static const double col_s_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	static const double power_q_s_fall[4][4];
	static const double lin_q_s_fall[4]; // total output net capacitance
	static const double col_q_s_fall[4]; // input transition time

	static const double power_q_s_rise[4][4];
	static const double lin_q_s_rise[4]; // total output net capacitance
	static const double col_q_s_rise[4]; // input transition time

	void end_of_elaboration();

	~drsp_4();

	SC_CTOR(drsp_4)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;
		sensitive << rb;
		sensitive << s;

		SC_METHOD(ff_input);
		sensitive << ip << rb << s;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(dtrsp_2)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_in<bool> s;
	sc_in<bool> sip;
	sc_in<bool> sm;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double capacitance_s;
	static const double fanout_load_s;
	static const double capacitance_sip;
	static const double fanout_load_sip;
	static const double capacitance_sm;
	static const double fanout_load_sm;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_rb_fall[4];
	static const double col_rb_fall[4]; // input transition time

	static const double power_rb_rise[4];
	static const double col_rb_rise[4]; // input transition time

	static const double power_s_fall[4];
	static const double col_s_fall[4]; // input transition time

	static const double power_s_rise[4];
	static const double col_s_rise[4]; // input transition time

	static const double power_sip_fall[4];
	static const double col_sip_fall[4]; // input transition time

	static const double power_sip_rise[4];
	static const double col_sip_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	static const double power_q_s_fall[4][4];
	static const double lin_q_s_fall[4]; // total output net capacitance
	static const double col_q_s_fall[4]; // input transition time

	static const double power_q_s_rise[4][4];
	static const double lin_q_s_rise[4]; // total output net capacitance
	static const double col_q_s_rise[4]; // input transition time

	void end_of_elaboration();

	~dtrsp_2();

	SC_CTOR(dtrsp_2)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;
		sensitive << rb;
		sensitive << s;

		SC_METHOD(ff_input);
		sensitive << ip << rb << s << sip << sm;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(inv_1)
{
	// ports
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~inv_1();

	SC_CTOR(inv_1)
	{
		SC_METHOD(proc);
		sensitive << ip;
	}
};

SC_MODULE(inv_2)
{
	// ports
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~inv_2();

	SC_CTOR(inv_2)
	{
		SC_METHOD(proc);
		sensitive << ip;
	}
};

SC_MODULE(inv_4)
{
	// ports
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~inv_4();

	SC_CTOR(inv_4)
	{
		SC_METHOD(proc);
		sensitive << ip;
	}
};

SC_MODULE(invzp_1)
{
	// ports
	sc_in<bool> c;
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_c;
	static const double fanout_load_c;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_c_fall[4];
	static const double col_c_fall[4]; // input transition time

	static const double power_c_rise[4];
	static const double col_c_rise[4]; // input transition time

	static const double power_ip_fall[4];
	static const double col_ip_fall[4]; // input transition time

	static const double power_ip_rise[4];
	static const double col_ip_rise[4]; // input transition time

	static const double power_op_c_fall[4][4];
	static const double lin_op_c_fall[4]; // total output net capacitance
	static const double col_op_c_fall[4]; // input transition time

	static const double power_op_c_rise[4][4];
	static const double lin_op_c_rise[4]; // total output net capacitance
	static const double col_op_c_rise[4]; // input transition time

	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~invzp_1();

	SC_CTOR(invzp_1)
	{
		SC_METHOD(proc);
		sensitive << c << ip;
	}
};

SC_MODULE(invzp_2)
{
	// ports
	sc_in<bool> c;
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_c;
	static const double fanout_load_c;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_c_fall[4][4];
	static const double lin_op_c_fall[4]; // total output net capacitance
	static const double col_op_c_fall[4]; // input transition time

	static const double power_op_c_rise[4][4];
	static const double lin_op_c_rise[4]; // total output net capacitance
	static const double col_op_c_rise[4]; // input transition time

	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~invzp_2();

	SC_CTOR(invzp_2)
	{
		SC_METHOD(proc);
		sensitive << c << ip;
	}
};

SC_MODULE(invzp_4)
{
	// ports
	sc_in<bool> c;
	sc_in<bool> ip;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_c;
	static const double fanout_load_c;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_c_fall[4][4];
	static const double lin_op_c_fall[4]; // total output net capacitance
	static const double col_op_c_fall[4]; // input transition time

	static const double power_op_c_rise[4][4];
	static const double lin_op_c_rise[4]; // total output net capacitance
	static const double col_op_c_rise[4]; // input transition time

	static const double power_op_ip_fall[4][4];
	static const double lin_op_ip_fall[4]; // total output net capacitance
	static const double col_op_ip_fall[4]; // input transition time

	static const double power_op_ip_rise[4][4];
	static const double lin_op_ip_rise[4]; // total output net capacitance
	static const double col_op_ip_rise[4]; // input transition time

	void end_of_elaboration();

	~invzp_4();

	SC_CTOR(invzp_4)
	{
		SC_METHOD(proc);
		sensitive << c << ip;
	}
};

SC_MODULE(lp_1)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void latch_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	void end_of_elaboration();

	~lp_1();

	SC_CTOR(lp_1)
	{
		SC_METHOD(proc);
		sensitive << IQ << IQN;

		SC_METHOD(latch_input);
		sensitive << ck << ip;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(lp_2)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void latch_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	void end_of_elaboration();

	~lp_2();

	SC_CTOR(lp_2)
	{
		SC_METHOD(proc);
		sensitive << IQ << IQN;

		SC_METHOD(latch_input);
		sensitive << ck << ip;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(lrp_1)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void latch_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	void end_of_elaboration();

	~lrp_1();

	SC_CTOR(lrp_1)
	{
		SC_METHOD(proc);
		sensitive << IQ << IQN;

		SC_METHOD(latch_input);
		sensitive << ck << ip << rb;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(lrp_2)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void latch_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	void end_of_elaboration();

	~lrp_2();

	SC_CTOR(lrp_2)
	{
		SC_METHOD(proc);
		sensitive << IQ << IQN;

		SC_METHOD(latch_input);
		sensitive << ck << ip << rb;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(lrp_4)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void latch_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	void end_of_elaboration();

	~lrp_4();

	SC_CTOR(lrp_4)
	{
		SC_METHOD(proc);
		sensitive << IQ << IQN;

		SC_METHOD(latch_input);
		sensitive << ck << ip << rb;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(lrsp_1)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_in<bool> s;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void latch_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double capacitance_s;
	static const double fanout_load_s;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	static const double power_q_s_fall[4][4];
	static const double lin_q_s_fall[4]; // total output net capacitance
	static const double col_q_s_fall[4]; // input transition time

	static const double power_q_s_rise[4][4];
	static const double lin_q_s_rise[4]; // total output net capacitance
	static const double col_q_s_rise[4]; // input transition time

	void end_of_elaboration();

	~lrsp_1();

	SC_CTOR(lrsp_1)
	{
		SC_METHOD(proc);
		sensitive << IQ << IQN;

		SC_METHOD(latch_input);
		sensitive << ck << ip << rb << s;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(lrsp_2)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_in<bool> s;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void latch_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double capacitance_s;
	static const double fanout_load_s;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	static const double power_q_s_fall[4][4];
	static const double lin_q_s_fall[4]; // total output net capacitance
	static const double col_q_s_fall[4]; // input transition time

	static const double power_q_s_rise[4][4];
	static const double lin_q_s_rise[4]; // total output net capacitance
	static const double col_q_s_rise[4]; // input transition time

	void end_of_elaboration();

	~lrsp_2();

	SC_CTOR(lrsp_2)
	{
		SC_METHOD(proc);
		sensitive << IQ << IQN;

		SC_METHOD(latch_input);
		sensitive << ck << ip << rb << s;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(lrsp_4)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> ip;
	sc_in<bool> rb;
	sc_in<bool> s;
	sc_out<bool> q;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void latch_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_ip;
	static const double fanout_load_ip;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double capacitance_s;
	static const double fanout_load_s;
	static const double max_capacitance_q;
	static const double max_fanout_q;

	// cell's internal power
	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	static const double power_q_s_fall[4][4];
	static const double lin_q_s_fall[4]; // total output net capacitance
	static const double col_q_s_fall[4]; // input transition time

	static const double power_q_s_rise[4][4];
	static const double lin_q_s_rise[4]; // total output net capacitance
	static const double col_q_s_rise[4]; // input transition time

	void end_of_elaboration();

	~lrsp_4();

	SC_CTOR(lrsp_4)
	{
		SC_METHOD(proc);
		sensitive << IQ << IQN;

		SC_METHOD(latch_input);
		sensitive << ck << ip << rb << s;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(mux2_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> s;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_s;
	static const double fanout_load_s;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_s_fall[4][4];
	static const double lin_op_s_fall[4]; // total output net capacitance
	static const double col_op_s_fall[4]; // input transition time

	static const double power_op_s_rise[4][4];
	static const double lin_op_s_rise[4]; // total output net capacitance
	static const double col_op_s_rise[4]; // input transition time

	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~mux2_1();

	SC_CTOR(mux2_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << s;
	}
};

SC_MODULE(mux2_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> s;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_s;
	static const double fanout_load_s;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_s_fall[4][4];
	static const double lin_op_s_fall[4]; // total output net capacitance
	static const double col_op_s_fall[4]; // input transition time

	static const double power_op_s_rise[4][4];
	static const double lin_op_s_rise[4]; // total output net capacitance
	static const double col_op_s_rise[4]; // input transition time

	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~mux2_2();

	SC_CTOR(mux2_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << s;
	}
};

SC_MODULE(mux2_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> s;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_s;
	static const double fanout_load_s;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_s_fall[4][4];
	static const double lin_op_s_fall[4]; // total output net capacitance
	static const double col_op_s_fall[4]; // input transition time

	static const double power_op_s_rise[4][4];
	static const double lin_op_s_rise[4]; // total output net capacitance
	static const double col_op_s_rise[4]; // input transition time

	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~mux2_4();

	SC_CTOR(mux2_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << s;
	}
};

SC_MODULE(nand2_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~nand2_1();

	SC_CTOR(nand2_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(nand2_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~nand2_2();

	SC_CTOR(nand2_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(nand2_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~nand2_4();

	SC_CTOR(nand2_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(nand3_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~nand3_1();

	SC_CTOR(nand3_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(nand3_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~nand3_2();

	SC_CTOR(nand3_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(nand3_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~nand3_4();

	SC_CTOR(nand3_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(nand4_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~nand4_1();

	SC_CTOR(nand4_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(nand4_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~nand4_2();

	SC_CTOR(nand4_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(nand4_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~nand4_4();

	SC_CTOR(nand4_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(nor2_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~nor2_1();

	SC_CTOR(nor2_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(nor2_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~nor2_2();

	SC_CTOR(nor2_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(nor2_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~nor2_4();

	SC_CTOR(nor2_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(nor3_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~nor3_1();

	SC_CTOR(nor3_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(nor3_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~nor3_2();

	SC_CTOR(nor3_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(nor3_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~nor3_4();

	SC_CTOR(nor3_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(nor4_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~nor4_1();

	SC_CTOR(nor4_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(nor4_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~nor4_2();

	SC_CTOR(nor4_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(nor4_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~nor4_4();

	SC_CTOR(nor4_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(or2_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~or2_1();

	SC_CTOR(or2_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(or2_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~or2_2();

	SC_CTOR(or2_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(or2_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~or2_4();

	SC_CTOR(or2_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(or3_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~or3_1();

	SC_CTOR(or3_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(or3_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~or3_2();

	SC_CTOR(or3_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(or3_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	void end_of_elaboration();

	~or3_4();

	SC_CTOR(or3_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(or4_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~or4_1();

	SC_CTOR(or4_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(or4_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~or4_2();

	SC_CTOR(or4_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(or4_4)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~or4_4();

	SC_CTOR(or4_4)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(xnor2_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~xnor2_1();

	SC_CTOR(xnor2_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(xnor2_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~xnor2_2();

	SC_CTOR(xnor2_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(xor2_1)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~xor2_1();

	SC_CTOR(xor2_1)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(xor2_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	void end_of_elaboration();

	~xor2_2();

	SC_CTOR(xor2_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2;
	}
};

SC_MODULE(ABorC)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	void end_of_elaboration();

	~ABorC();

	SC_CTOR(ABorC)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(ab_or_c_or_d)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~ab_or_c_or_d();

	SC_CTOR(ab_or_c_or_d)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

SC_MODULE(fulladder)
{
	// ports
	sc_in<bool> a;
	sc_in<bool> b;
	sc_in<bool> ci;
	sc_out<bool> s;
	sc_out<bool> co;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_a;
	static const double fanout_load_a;
	static const double capacitance_b;
	static const double fanout_load_b;
	static const double capacitance_ci;
	static const double fanout_load_ci;
	static const double max_capacitance_s;
	static const double max_fanout_s;
	static const double max_capacitance_co;
	static const double max_fanout_co;

	// cell's internal power
	static const double power_s_a[4][4];
	static const double lin_s_a[4]; // total output net capacitance
	static const double col_s_a[4]; // input transition time

	static const double power_s_b[4][4];
	static const double lin_s_b[4]; // total output net capacitance
	static const double col_s_b[4]; // input transition time

	static const double power_s_ci[4][4];
	static const double lin_s_ci[4]; // total output net capacitance
	static const double col_s_ci[4]; // input transition time

	static const double power_co_a[4][4];
	static const double lin_co_a[4]; // total output net capacitance
	static const double col_co_a[4]; // input transition time

	static const double power_co_b[4][4];
	static const double lin_co_b[4]; // total output net capacitance
	static const double col_co_b[4]; // input transition time

	static const double power_co_ci[4][4];
	static const double lin_co_ci[4]; // total output net capacitance
	static const double col_co_ci[4]; // input transition time

	void end_of_elaboration();

	~fulladder();

	SC_CTOR(fulladder)
	{
		SC_METHOD(proc);
		sensitive << a << b << ci;
	}
};

SC_MODULE(jkrp_2)
{
	// ports
	sc_in<bool> ck;
	sc_in<bool> j;
	sc_in<bool> k;
	sc_in<bool> rb;
	sc_out<bool> q;
	sc_out<bool> qb;

	// signals
	psc_signal_bool IQ;
	psc_signal_bool IQN;

	// processes
	void proc();
	void ff_input();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ck;
	static const double fanout_load_ck;
	static const double capacitance_j;
	static const double fanout_load_j;
	static const double capacitance_k;
	static const double fanout_load_k;
	static const double capacitance_rb;
	static const double fanout_load_rb;
	static const double max_capacitance_q;
	static const double max_fanout_q;
	static const double max_capacitance_qb;
	static const double max_fanout_qb;

	// cell's internal power
	static const double power_ck_fall[4];
	static const double col_ck_fall[4]; // input transition time

	static const double power_ck_rise[4];
	static const double col_ck_rise[4]; // input transition time

	static const double power_j_fall[4];
	static const double col_j_fall[4]; // input transition time

	static const double power_j_rise[4];
	static const double col_j_rise[4]; // input transition time

	static const double power_k_fall[4];
	static const double col_k_fall[4]; // input transition time

	static const double power_k_rise[4];
	static const double col_k_rise[4]; // input transition time

	static const double power_rb_fall[4];
	static const double col_rb_fall[4]; // input transition time

	static const double power_rb_rise[4];
	static const double col_rb_rise[4]; // input transition time

	static const double power_q_ck_fall[4][4];
	static const double lin_q_ck_fall[4]; // total output net capacitance
	static const double col_q_ck_fall[4]; // input transition time

	static const double power_q_ck_rise[4][4];
	static const double lin_q_ck_rise[4]; // total output net capacitance
	static const double col_q_ck_rise[4]; // input transition time

	static const double power_q_rb_fall[4][4];
	static const double lin_q_rb_fall[4]; // total output net capacitance
	static const double col_q_rb_fall[4]; // input transition time

	static const double power_q_rb_rise[4][4];
	static const double lin_q_rb_rise[4]; // total output net capacitance
	static const double col_q_rb_rise[4]; // input transition time

	void end_of_elaboration();

	~jkrp_2();

	SC_CTOR(jkrp_2)
	{
		SC_METHOD(proc);
		sensitive_pos << ck;
		sensitive << rb;

		SC_METHOD(ff_input);
		sensitive << j << k << rb;

		PSC_OBJ_ALIAS(IQ, "IQ");
		PSC_IGNORE(IQ);
		PSC_OBJ_ALIAS(IQN, "IQN");
		PSC_IGNORE(IQN);
	}
};

SC_MODULE(mux3_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> s0;
	sc_in<bool> s1;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_s0;
	static const double fanout_load_s0;
	static const double capacitance_s1;
	static const double fanout_load_s1;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_ip1_fall[4];
	static const double col_ip1_fall[4]; // input transition time

	static const double power_ip1_rise[4];
	static const double col_ip1_rise[4]; // input transition time

	static const double power_ip2_fall[4];
	static const double col_ip2_fall[4]; // input transition time

	static const double power_ip2_rise[4];
	static const double col_ip2_rise[4]; // input transition time

	static const double power_ip3_fall[4];
	static const double col_ip3_fall[4]; // input transition time

	static const double power_ip3_rise[4];
	static const double col_ip3_rise[4]; // input transition time

	static const double power_s0_fall[4];
	static const double col_s0_fall[4]; // input transition time

	static const double power_s0_rise[4];
	static const double col_s0_rise[4]; // input transition time

	static const double power_s1_fall[4];
	static const double col_s1_fall[4]; // input transition time

	static const double power_s1_rise[4];
	static const double col_s1_rise[4]; // input transition time

	static const double power_op_s1[4][4];
	static const double lin_op_s1[4]; // total output net capacitance
	static const double col_op_s1[4]; // input transition time

	static const double power_op_s0[4][4];
	static const double lin_op_s0[4]; // total output net capacitance
	static const double col_op_s0[4]; // input transition time

	static const double power_op_ip1[4][4];
	static const double lin_op_ip1[4]; // total output net capacitance
	static const double col_op_ip1[4]; // input transition time

	static const double power_op_ip2[4][4];
	static const double lin_op_ip2[4]; // total output net capacitance
	static const double col_op_ip2[4]; // input transition time

	static const double power_op_ip3[4][4];
	static const double lin_op_ip3[4]; // total output net capacitance
	static const double col_op_ip3[4]; // input transition time

	void end_of_elaboration();

	~mux3_2();

	SC_CTOR(mux3_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << s0 << s1;
	}
};

SC_MODULE(mux4_2)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_in<bool> s0;
	sc_in<bool> s1;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double capacitance_s0;
	static const double fanout_load_s0;
	static const double capacitance_s1;
	static const double fanout_load_s1;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_ip1_fall[4];
	static const double col_ip1_fall[4]; // input transition time

	static const double power_ip1_rise[4];
	static const double col_ip1_rise[4]; // input transition time

	static const double power_ip2_fall[4];
	static const double col_ip2_fall[4]; // input transition time

	static const double power_ip2_rise[4];
	static const double col_ip2_rise[4]; // input transition time

	static const double power_ip3_fall[4];
	static const double col_ip3_fall[4]; // input transition time

	static const double power_ip3_rise[4];
	static const double col_ip3_rise[4]; // input transition time

	static const double power_ip4_fall[4];
	static const double col_ip4_fall[4]; // input transition time

	static const double power_ip4_rise[4];
	static const double col_ip4_rise[4]; // input transition time

	static const double power_s0_fall[4];
	static const double col_s0_fall[4]; // input transition time

	static const double power_s0_rise[4];
	static const double col_s0_rise[4]; // input transition time

	static const double power_s1_fall[4];
	static const double col_s1_fall[4]; // input transition time

	static const double power_s1_rise[4];
	static const double col_s1_rise[4]; // input transition time

	static const double power_op_s1[4][4];
	static const double lin_op_s1[4]; // total output net capacitance
	static const double col_op_s1[4]; // input transition time

	static const double power_op_s0[4][4];
	static const double lin_op_s0[4]; // total output net capacitance
	static const double col_op_s0[4]; // input transition time

	static const double power_op_ip1[4][4];
	static const double lin_op_ip1[4]; // total output net capacitance
	static const double col_op_ip1[4]; // input transition time

	static const double power_op_ip2[4][4];
	static const double lin_op_ip2[4]; // total output net capacitance
	static const double col_op_ip2[4]; // input transition time

	static const double power_op_ip3[4][4];
	static const double lin_op_ip3[4]; // total output net capacitance
	static const double col_op_ip3[4]; // input transition time

	static const double power_op_ip4[4][4];
	static const double lin_op_ip4[4]; // total output net capacitance
	static const double col_op_ip4[4]; // input transition time

	void end_of_elaboration();

	~mux4_2();

	SC_CTOR(mux4_2)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4 << s0 << s1;
	}
};

SC_MODULE(ABnorC)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	void end_of_elaboration();

	~ABnorC();

	SC_CTOR(ABnorC)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3;
	}
};

SC_MODULE(not_ab_or_c_or_d)
{
	// ports
	sc_in<bool> ip1;
	sc_in<bool> ip2;
	sc_in<bool> ip3;
	sc_in<bool> ip4;
	sc_out<bool> op;

	// processes
	void proc();

	// the string which represents this cell
	static const char *celltype;

	// technology library cell attributes
	static const double leakage_power;
	static const double capacitance_ip1;
	static const double fanout_load_ip1;
	static const double capacitance_ip2;
	static const double fanout_load_ip2;
	static const double capacitance_ip3;
	static const double fanout_load_ip3;
	static const double capacitance_ip4;
	static const double fanout_load_ip4;
	static const double max_capacitance_op;
	static const double max_fanout_op;

	// cell's internal power
	static const double power_op_ip1_fall[4][4];
	static const double lin_op_ip1_fall[4]; // total output net capacitance
	static const double col_op_ip1_fall[4]; // input transition time

	static const double power_op_ip1_rise[4][4];
	static const double lin_op_ip1_rise[4]; // total output net capacitance
	static const double col_op_ip1_rise[4]; // input transition time

	static const double power_op_ip2_fall[4][4];
	static const double lin_op_ip2_fall[4]; // total output net capacitance
	static const double col_op_ip2_fall[4]; // input transition time

	static const double power_op_ip2_rise[4][4];
	static const double lin_op_ip2_rise[4]; // total output net capacitance
	static const double col_op_ip2_rise[4]; // input transition time

	static const double power_op_ip3_fall[4][4];
	static const double lin_op_ip3_fall[4]; // total output net capacitance
	static const double col_op_ip3_fall[4]; // input transition time

	static const double power_op_ip3_rise[4][4];
	static const double lin_op_ip3_rise[4]; // total output net capacitance
	static const double col_op_ip3_rise[4]; // input transition time

	static const double power_op_ip4_fall[4][4];
	static const double lin_op_ip4_fall[4]; // total output net capacitance
	static const double col_op_ip4_fall[4]; // input transition time

	static const double power_op_ip4_rise[4][4];
	static const double lin_op_ip4_rise[4]; // total output net capacitance
	static const double col_op_ip4_rise[4]; // input transition time

	void end_of_elaboration();

	~not_ab_or_c_or_d();

	SC_CTOR(not_ab_or_c_or_d)
	{
		SC_METHOD(proc);
		sensitive << ip1 << ip2 << ip3 << ip4;
	}
};

#endif
